<?xml version="1.0" encoding="windows-1252"?>

<!--
    Document   : ReadMe.txt.xml
    Created on : February 22, 2011, 2:23 AM
    Author     : shrom
    Description:
        Purpose of the document follows.
-->

<root>
Server is running on 8080, however client is trying to connect to 8888, use any soap monitor to view message, for example SOAP Membrane.

http://localhost:8080/m1wsp/services/cvc?wsdl=1
http://localhost:8888/m1wsp/services/cvc?wsdl=1

Add         
    <jvm-options>-DWSIT_HOME=${com.sun.aas.instanceRoot}</jvm-options>
    to domain.xml    
    
Policy should also work with <sp:RequireIssuerSerialReference/> 

                        <sp:MustSupportRefKeyIdentifier/>
                        <sp:MustSupportRefIssuerSerial/>
                        <sp:MustSupportRefThumbprint/>
                        <sp:MustSupportRefEncryptedKey/>
                        <sp:RequireSignatureConfirmation/>


Problem connected with SHA-1 used by Metro as default instead of required SHA-256 specified by WSDL. 
New WSDL policy requires an additional attribute signatureAlgorithm for Metro to use SHA-256 as following: 
<sp:AlgorithmSuite signatureAlgorithm="SHA256withRSA"> <wsp:Policy> <sp:Basic256Sha256/> </wsp:Policy> </sp:AlgorithmSuite> 
As it turned out SHA-256 is supported only in Java with versions higher than 1.6.22 and requires Metro 2.1 with Glassfish 3.1. 
See the following posts for details: 
    http://blogs.sun.com/gfsecurity/entry/what_s_new_in_metro 
    http://blogs.sun.com/SureshMandalapu/entry/support_of_rsa_sha256_and 
    
Currently uses XML encryption with XML Signatures. 

Metro uses <sp:RequireThumbprintReference/> as default:
<sp:RecipientToken> <wsp:Policy> <sp:X509Token sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/Never"> <wsp:Policy> <sp:RequireThumbprintReference/> <sp:WssX509V3Token11/> </wsp:Policy> </sp:X509Token> </wsp:Policy> </sp:RecipientToken> 
.NET uses <sp:RequireThumbprintReference/> as default: 
<sp:RecipientToken> <wsp:Policy> <sp:X509Token sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToInitiator"> <wsp:Policy> <sp:RequireThumbprintReference/> <sp:WssX509V3Token11/> </wsp:Policy> </sp:X509Token> </wsp:Policy> </sp:RecipientToken> Resolved issue with MTOM: .NET is able to accept only MTOM or plain XML, not both, Metro client was trying to use both. 

Moved our implementation to SOAP 1.2 from SOAP 1.1, since .NET service defaults it to SOAP 1.2 We need to test the following transport binding for SOAP 1.2 <soap:binding transport="http://www.w3.org/2003/05/soap/bindings/HTTP/" style="document" /> Right now we have: <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/> 
Metro specifies first binding as the default for SOAP 1.2, i'm not sure thought if it's default for WSDL 2.0. 

.NET publishes modified GFIPM-Test-Contract-CommercialVehicleCollisionWebservice WSDL, which throws off precompiled Metro client. Provided a hack to use local version of the WSDL for WS-MetadataExchange requests for Metro client. 

Resolved <sp:EncryptBeforeSigning/> Default behavior is SignBeforeEncrypt, however .NET decided to implement EncryptBeforeSigning as default for the service. 


http://docs.google.com/viewer?a=v&q=cache:OguV5xffKQIJ:developer.connectopensource.org/download/attachments/32768055/Asynchrous%2BCommunication%2BDesign.docx+&hl=en&gl=us&pid=bl&srcid=ADGEESj9t3TdPL1znlz7BntKcYL7NkDkiaXNUYMwELkcbBvTVwCB_7ojgNznvsGx8N84pclJ2i7u4faP-YwLu6OzDCXDD2qHk3WMfeVF9Tt3d6N4bI5uwZuXv-JiaA5K0HY_VAN4nB8Q&sig=AHIEtbQX5nrYbtXHQJWPXEUlpfqyIjKVVw&pli=1


http://www.w3.org/TR/soap12-part1/
http://www.w3.org/TR/soap12-part2/
http://www.w3.org/TR/ws-addr-wsdl/

http://wsit.java.net/status-notes/status-notes-2-1-FCS.html


Non-standard WSIT configuration file locations for Metro
Configuring multiple WSIT web services or clients at once
Pass configuration file location into WSIT
http://blogs.sun.com/ritzmann/entry/non_standard_wsit_configuration_file

http://blogs.sun.com/trustjdg/entry/handling_token_and_key_requirements
http://blogs.sun.com/trustjdg/entry/handling_token_and_key_requirements3
http://blogs.sun.com/trustjdg/entry/handling_token_and_key_requirements2



</root>
